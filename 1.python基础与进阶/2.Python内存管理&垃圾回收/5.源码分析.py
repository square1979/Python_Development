"""
1.float 结构体：
    （1）如果free_list 中有可用对象，则从free_list链表中拿出来一个，否则对象重新开辟内存
    （2）引用对象 计数器加一 销毁对象 计数器减一
    （3）检测当前free_list数量是否满了，如果已经满了则直接将对象销毁

2.list 结构体：
    （1）如果free_list中有缓存的对象，则直接从free_list中获取一个对象来使用，如果没有需要开辟内存初始化对象
    （2）创建完对象 将其放到refchain链表中
    （3）分析回收的零代的数量

3.当零代达到阈值，1代开始扫描；当1代达到阈值时会将上一代和下一代都参与扫描

4.如果扫描 0代 young = 0代，old = 1代/2代； 1代 young= 1代 old = 2代

总结：1.对于简单的、不可变的对象如 float，int 和 str，这些对象创建时会直接使用引用计数来管理。
     2.对于复杂的对象如 list，不仅使用引用计数，还会参与分代回收。当某一代的对象数量达到某个阈值时，
        垃圾回收器会进行扫描。如果没有找到可以回收的对象，则允许继续创建新对象。
     3.垃圾回收机制负责对象的销毁：
        1. 引用计数为零
        2. 循环引用被清理
        3. 使用del显式销毁
        4. 程序退出


"""
